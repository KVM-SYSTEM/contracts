// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: core.proto

package core_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MaterialService_Add_FullMethodName     = "/core.MaterialService/Add"
	MaterialService_Get_FullMethodName     = "/core.MaterialService/Get"
	MaterialService_GetMany_FullMethodName = "/core.MaterialService/GetMany"
	MaterialService_Delete_FullMethodName  = "/core.MaterialService/Delete"
)

// MaterialServiceClient is the client API for MaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialServiceClient interface {
	Add(ctx context.Context, in *AddMaterialReq, opts ...grpc.CallOption) (*AddMaterialRes, error)
	Get(ctx context.Context, in *GetMaterialReq, opts ...grpc.CallOption) (*GetMaterialRes, error)
	GetMany(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetManyMaterialRes, error)
	Delete(ctx context.Context, in *DeleteMaterialReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type materialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialServiceClient(cc grpc.ClientConnInterface) MaterialServiceClient {
	return &materialServiceClient{cc}
}

func (c *materialServiceClient) Add(ctx context.Context, in *AddMaterialReq, opts ...grpc.CallOption) (*AddMaterialRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMaterialRes)
	err := c.cc.Invoke(ctx, MaterialService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) Get(ctx context.Context, in *GetMaterialReq, opts ...grpc.CallOption) (*GetMaterialRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMaterialRes)
	err := c.cc.Invoke(ctx, MaterialService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetMany(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetManyMaterialRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManyMaterialRes)
	err := c.cc.Invoke(ctx, MaterialService_GetMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) Delete(ctx context.Context, in *DeleteMaterialReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MaterialService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialServiceServer is the server API for MaterialService service.
// All implementations must embed UnimplementedMaterialServiceServer
// for forward compatibility.
type MaterialServiceServer interface {
	Add(context.Context, *AddMaterialReq) (*AddMaterialRes, error)
	Get(context.Context, *GetMaterialReq) (*GetMaterialRes, error)
	GetMany(context.Context, *emptypb.Empty) (*GetManyMaterialRes, error)
	Delete(context.Context, *DeleteMaterialReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedMaterialServiceServer()
}

// UnimplementedMaterialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaterialServiceServer struct{}

func (UnimplementedMaterialServiceServer) Add(context.Context, *AddMaterialReq) (*AddMaterialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMaterialServiceServer) Get(context.Context, *GetMaterialReq) (*GetMaterialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMaterialServiceServer) GetMany(context.Context, *emptypb.Empty) (*GetManyMaterialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedMaterialServiceServer) Delete(context.Context, *DeleteMaterialReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMaterialServiceServer) mustEmbedUnimplementedMaterialServiceServer() {}
func (UnimplementedMaterialServiceServer) testEmbeddedByValue()                         {}

// UnsafeMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialServiceServer will
// result in compilation errors.
type UnsafeMaterialServiceServer interface {
	mustEmbedUnimplementedMaterialServiceServer()
}

func RegisterMaterialServiceServer(s grpc.ServiceRegistrar, srv MaterialServiceServer) {
	// If the following call pancis, it indicates UnimplementedMaterialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MaterialService_ServiceDesc, srv)
}

func _MaterialService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).Add(ctx, req.(*AddMaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).Get(ctx, req.(*GetMaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetMany(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).Delete(ctx, req.(*DeleteMaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialService_ServiceDesc is the grpc.ServiceDesc for MaterialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.MaterialService",
	HandlerType: (*MaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _MaterialService_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MaterialService_Get_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _MaterialService_GetMany_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MaterialService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

const (
	PriceService_Get_FullMethodName     = "/core.PriceService/Get"
	PriceService_GetMany_FullMethodName = "/core.PriceService/GetMany"
)

// PriceServiceClient is the client API for PriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceServiceClient interface {
	Get(ctx context.Context, in *GetPriceReq, opts ...grpc.CallOption) (*GetPriceRes, error)
	GetMany(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetManyPricesRes, error)
}

type priceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceServiceClient(cc grpc.ClientConnInterface) PriceServiceClient {
	return &priceServiceClient{cc}
}

func (c *priceServiceClient) Get(ctx context.Context, in *GetPriceReq, opts ...grpc.CallOption) (*GetPriceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPriceRes)
	err := c.cc.Invoke(ctx, PriceService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceServiceClient) GetMany(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetManyPricesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManyPricesRes)
	err := c.cc.Invoke(ctx, PriceService_GetMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceServiceServer is the server API for PriceService service.
// All implementations must embed UnimplementedPriceServiceServer
// for forward compatibility.
type PriceServiceServer interface {
	Get(context.Context, *GetPriceReq) (*GetPriceRes, error)
	GetMany(context.Context, *emptypb.Empty) (*GetManyPricesRes, error)
	mustEmbedUnimplementedPriceServiceServer()
}

// UnimplementedPriceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPriceServiceServer struct{}

func (UnimplementedPriceServiceServer) Get(context.Context, *GetPriceReq) (*GetPriceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPriceServiceServer) GetMany(context.Context, *emptypb.Empty) (*GetManyPricesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedPriceServiceServer) mustEmbedUnimplementedPriceServiceServer() {}
func (UnimplementedPriceServiceServer) testEmbeddedByValue()                      {}

// UnsafePriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceServiceServer will
// result in compilation errors.
type UnsafePriceServiceServer interface {
	mustEmbedUnimplementedPriceServiceServer()
}

func RegisterPriceServiceServer(s grpc.ServiceRegistrar, srv PriceServiceServer) {
	// If the following call pancis, it indicates UnimplementedPriceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PriceService_ServiceDesc, srv)
}

func _PriceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).Get(ctx, req.(*GetPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceService_GetMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).GetMany(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceService_ServiceDesc is the grpc.ServiceDesc for PriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.PriceService",
	HandlerType: (*PriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PriceService_Get_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _PriceService_GetMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

const (
	DivideService_Get_FullMethodName = "/core.DivideService/Get"
)

// DivideServiceClient is the client API for DivideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DivideServiceClient interface {
	Get(ctx context.Context, in *GetDivideReq, opts ...grpc.CallOption) (*GetDivideRes, error)
}

type divideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDivideServiceClient(cc grpc.ClientConnInterface) DivideServiceClient {
	return &divideServiceClient{cc}
}

func (c *divideServiceClient) Get(ctx context.Context, in *GetDivideReq, opts ...grpc.CallOption) (*GetDivideRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDivideRes)
	err := c.cc.Invoke(ctx, DivideService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DivideServiceServer is the server API for DivideService service.
// All implementations must embed UnimplementedDivideServiceServer
// for forward compatibility.
type DivideServiceServer interface {
	Get(context.Context, *GetDivideReq) (*GetDivideRes, error)
	mustEmbedUnimplementedDivideServiceServer()
}

// UnimplementedDivideServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDivideServiceServer struct{}

func (UnimplementedDivideServiceServer) Get(context.Context, *GetDivideReq) (*GetDivideRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDivideServiceServer) mustEmbedUnimplementedDivideServiceServer() {}
func (UnimplementedDivideServiceServer) testEmbeddedByValue()                       {}

// UnsafeDivideServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DivideServiceServer will
// result in compilation errors.
type UnsafeDivideServiceServer interface {
	mustEmbedUnimplementedDivideServiceServer()
}

func RegisterDivideServiceServer(s grpc.ServiceRegistrar, srv DivideServiceServer) {
	// If the following call pancis, it indicates UnimplementedDivideServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DivideService_ServiceDesc, srv)
}

func _DivideService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDivideReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivideServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DivideService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivideServiceServer).Get(ctx, req.(*GetDivideReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DivideService_ServiceDesc is the grpc.ServiceDesc for DivideService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DivideService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.DivideService",
	HandlerType: (*DivideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DivideService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

const (
	SectionService_GetMany_FullMethodName = "/core.SectionService/GetMany"
	SectionService_Get_FullMethodName     = "/core.SectionService/Get"
)

// SectionServiceClient is the client API for SectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SectionServiceClient interface {
	GetMany(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetManySectionsRes, error)
	Get(ctx context.Context, in *GetSectionReq, opts ...grpc.CallOption) (*GetSectionRes, error)
}

type sectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSectionServiceClient(cc grpc.ClientConnInterface) SectionServiceClient {
	return &sectionServiceClient{cc}
}

func (c *sectionServiceClient) GetMany(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetManySectionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManySectionsRes)
	err := c.cc.Invoke(ctx, SectionService_GetMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) Get(ctx context.Context, in *GetSectionReq, opts ...grpc.CallOption) (*GetSectionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSectionRes)
	err := c.cc.Invoke(ctx, SectionService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SectionServiceServer is the server API for SectionService service.
// All implementations must embed UnimplementedSectionServiceServer
// for forward compatibility.
type SectionServiceServer interface {
	GetMany(context.Context, *emptypb.Empty) (*GetManySectionsRes, error)
	Get(context.Context, *GetSectionReq) (*GetSectionRes, error)
	mustEmbedUnimplementedSectionServiceServer()
}

// UnimplementedSectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSectionServiceServer struct{}

func (UnimplementedSectionServiceServer) GetMany(context.Context, *emptypb.Empty) (*GetManySectionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedSectionServiceServer) Get(context.Context, *GetSectionReq) (*GetSectionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSectionServiceServer) mustEmbedUnimplementedSectionServiceServer() {}
func (UnimplementedSectionServiceServer) testEmbeddedByValue()                        {}

// UnsafeSectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SectionServiceServer will
// result in compilation errors.
type UnsafeSectionServiceServer interface {
	mustEmbedUnimplementedSectionServiceServer()
}

func RegisterSectionServiceServer(s grpc.ServiceRegistrar, srv SectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SectionService_ServiceDesc, srv)
}

func _SectionService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SectionService_GetMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).GetMany(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SectionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).Get(ctx, req.(*GetSectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SectionService_ServiceDesc is the grpc.ServiceDesc for SectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.SectionService",
	HandlerType: (*SectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMany",
			Handler:    _SectionService_GetMany_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SectionService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

const (
	UserService_Get_FullMethodName     = "/core.UserService/Get"
	UserService_GetMany_FullMethodName = "/core.UserService/GetMany"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Get(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error)
	GetMany(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetManyUsersRes, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Get(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRes)
	err := c.cc.Invoke(ctx, UserService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMany(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetManyUsersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManyUsersRes)
	err := c.cc.Invoke(ctx, UserService_GetMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	Get(context.Context, *GetUserReq) (*GetUserRes, error)
	GetMany(context.Context, *emptypb.Empty) (*GetManyUsersRes, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) Get(context.Context, *GetUserReq) (*GetUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserServiceServer) GetMany(context.Context, *emptypb.Empty) (*GetManyUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMany(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserService_Get_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _UserService_GetMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

const (
	MeasureService_Get_FullMethodName       = "/core.MeasureService/Get"
	MeasureService_GetByName_FullMethodName = "/core.MeasureService/GetByName"
)

// MeasureServiceClient is the client API for MeasureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeasureServiceClient interface {
	Get(ctx context.Context, in *GetMeasureReq, opts ...grpc.CallOption) (*GetMeasureRes, error)
	GetByName(ctx context.Context, in *GetMeasureByNameReq, opts ...grpc.CallOption) (*GetMeasureByNameRes, error)
}

type measureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeasureServiceClient(cc grpc.ClientConnInterface) MeasureServiceClient {
	return &measureServiceClient{cc}
}

func (c *measureServiceClient) Get(ctx context.Context, in *GetMeasureReq, opts ...grpc.CallOption) (*GetMeasureRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeasureRes)
	err := c.cc.Invoke(ctx, MeasureService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureServiceClient) GetByName(ctx context.Context, in *GetMeasureByNameReq, opts ...grpc.CallOption) (*GetMeasureByNameRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeasureByNameRes)
	err := c.cc.Invoke(ctx, MeasureService_GetByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeasureServiceServer is the server API for MeasureService service.
// All implementations must embed UnimplementedMeasureServiceServer
// for forward compatibility.
type MeasureServiceServer interface {
	Get(context.Context, *GetMeasureReq) (*GetMeasureRes, error)
	GetByName(context.Context, *GetMeasureByNameReq) (*GetMeasureByNameRes, error)
	mustEmbedUnimplementedMeasureServiceServer()
}

// UnimplementedMeasureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeasureServiceServer struct{}

func (UnimplementedMeasureServiceServer) Get(context.Context, *GetMeasureReq) (*GetMeasureRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMeasureServiceServer) GetByName(context.Context, *GetMeasureByNameReq) (*GetMeasureByNameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedMeasureServiceServer) mustEmbedUnimplementedMeasureServiceServer() {}
func (UnimplementedMeasureServiceServer) testEmbeddedByValue()                        {}

// UnsafeMeasureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeasureServiceServer will
// result in compilation errors.
type UnsafeMeasureServiceServer interface {
	mustEmbedUnimplementedMeasureServiceServer()
}

func RegisterMeasureServiceServer(s grpc.ServiceRegistrar, srv MeasureServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeasureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeasureService_ServiceDesc, srv)
}

func _MeasureService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeasureService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureServiceServer).Get(ctx, req.(*GetMeasureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasureByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeasureService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureServiceServer).GetByName(ctx, req.(*GetMeasureByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MeasureService_ServiceDesc is the grpc.ServiceDesc for MeasureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeasureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.MeasureService",
	HandlerType: (*MeasureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MeasureService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _MeasureService_GetByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

const (
	ObjectService_Get_FullMethodName        = "/core.ObjectService/Get"
	ObjectService_GetDefault_FullMethodName = "/core.ObjectService/GetDefault"
	ObjectService_Update_FullMethodName     = "/core.ObjectService/Update"
)

// ObjectServiceClient is the client API for ObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectServiceClient interface {
	Get(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectRes, error)
	GetDefault(ctx context.Context, in *GetDefaultObjectReq, opts ...grpc.CallOption) (*GetDefaultObjectRes, error)
	Update(ctx context.Context, in *UpdateObjectReq, opts ...grpc.CallOption) (*UpdateObjectRes, error)
}

type objectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectServiceClient(cc grpc.ClientConnInterface) ObjectServiceClient {
	return &objectServiceClient{cc}
}

func (c *objectServiceClient) Get(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectRes)
	err := c.cc.Invoke(ctx, ObjectService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetDefault(ctx context.Context, in *GetDefaultObjectReq, opts ...grpc.CallOption) (*GetDefaultObjectRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultObjectRes)
	err := c.cc.Invoke(ctx, ObjectService_GetDefault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) Update(ctx context.Context, in *UpdateObjectReq, opts ...grpc.CallOption) (*UpdateObjectRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateObjectRes)
	err := c.cc.Invoke(ctx, ObjectService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectServiceServer is the server API for ObjectService service.
// All implementations must embed UnimplementedObjectServiceServer
// for forward compatibility.
type ObjectServiceServer interface {
	Get(context.Context, *GetObjectReq) (*GetObjectRes, error)
	GetDefault(context.Context, *GetDefaultObjectReq) (*GetDefaultObjectRes, error)
	Update(context.Context, *UpdateObjectReq) (*UpdateObjectRes, error)
	mustEmbedUnimplementedObjectServiceServer()
}

// UnimplementedObjectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedObjectServiceServer struct{}

func (UnimplementedObjectServiceServer) Get(context.Context, *GetObjectReq) (*GetObjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedObjectServiceServer) GetDefault(context.Context, *GetDefaultObjectReq) (*GetDefaultObjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefault not implemented")
}
func (UnimplementedObjectServiceServer) Update(context.Context, *UpdateObjectReq) (*UpdateObjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedObjectServiceServer) mustEmbedUnimplementedObjectServiceServer() {}
func (UnimplementedObjectServiceServer) testEmbeddedByValue()                       {}

// UnsafeObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServiceServer will
// result in compilation errors.
type UnsafeObjectServiceServer interface {
	mustEmbedUnimplementedObjectServiceServer()
}

func RegisterObjectServiceServer(s grpc.ServiceRegistrar, srv ObjectServiceServer) {
	// If the following call pancis, it indicates UnimplementedObjectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ObjectService_ServiceDesc, srv)
}

func _ObjectService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).Get(ctx, req.(*GetObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetDefault(ctx, req.(*GetDefaultObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).Update(ctx, req.(*UpdateObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectService_ServiceDesc is the grpc.ServiceDesc for ObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.ObjectService",
	HandlerType: (*ObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ObjectService_Get_Handler,
		},
		{
			MethodName: "GetDefault",
			Handler:    _ObjectService_GetDefault_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ObjectService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

const (
	StatusService_Get_FullMethodName = "/core.StatusService/Get"
)

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusServiceClient interface {
	Get(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusRes, error)
}

type statusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusServiceClient(cc grpc.ClientConnInterface) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) Get(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusRes)
	err := c.cc.Invoke(ctx, StatusService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
// All implementations must embed UnimplementedStatusServiceServer
// for forward compatibility.
type StatusServiceServer interface {
	Get(context.Context, *GetStatusReq) (*GetStatusRes, error)
	mustEmbedUnimplementedStatusServiceServer()
}

// UnimplementedStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatusServiceServer struct{}

func (UnimplementedStatusServiceServer) Get(context.Context, *GetStatusReq) (*GetStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStatusServiceServer) mustEmbedUnimplementedStatusServiceServer() {}
func (UnimplementedStatusServiceServer) testEmbeddedByValue()                       {}

// UnsafeStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusServiceServer will
// result in compilation errors.
type UnsafeStatusServiceServer interface {
	mustEmbedUnimplementedStatusServiceServer()
}

func RegisterStatusServiceServer(s grpc.ServiceRegistrar, srv StatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatusService_ServiceDesc, srv)
}

func _StatusService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).Get(ctx, req.(*GetStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StatusService_ServiceDesc is the grpc.ServiceDesc for StatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _StatusService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}
